---
name: Pull Request

on:
  # Enable manual running of action if necessary
  workflow_dispatch:
  # Build and test deployment the image on pushes to main branch
  pull_request:
    # Only publish on push to main branch
    branches:
      - main
    # Only run if the PR yaml has changed or a Dockerfile has changed
    paths:
      - Dockerfile**
      - "**on_pr.yml"
      - "**.py"
      - requirements.txt

jobs:
  flake8-lint:
    runs-on: ubuntu-latest
    name: "Linting: flake8"
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: Set up Python environment
        uses: actions/setup-python@v2.3.2
        with:
          python-version: "3.9"
      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          ignore: "E501,E111,E114"

  hadolint:
    name: "Linting: hadolint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Pull hadolint/hadolint:latest Image
        run: docker pull hadolint/hadolint:latest
      - name: Run hadolint against Dockerfiles
        run: docker run --rm -i -v "$PWD":/workdir --workdir /workdir --entrypoint hadolint hadolint/hadolint --ignore DL3013 --ignore DL3008 --ignore DL3007 --ignore DL3001 $(find . -type f -iname "Dockerfile*")

  # shellcheck:
  #   name: Run shellcheck against shell scripts
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event_name == 'pull_request' }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Pull koalaman/shellcheck:stable Image
  #       run: docker pull koalaman/shellcheck:stable
  #     - name: Run Shellcheck against shell scripts
  #       run: docker run --rm -i -v "$PWD:/mnt" koalaman/shellcheck:stable $(find . -type f -exec grep -m1 -l -E '^#!.*sh.*' {} \; | grep -v '/.git/')

  test_build:
    name: Test Build
    runs-on: ubuntu-latest
    needs: [hadolint, flake8-lint]
    strategy:
      matrix:
        docker-platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v7
    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # List of files to check to trigger a rebuild on this job
      - name: Get specific changed files
        id: changed-files-specific
        uses: tj-actions/changed-files@v17
        with:
          files: |
            Dockerfile
            **.py
            requirements.txt
            **.yml
            !*.md
            !*.MD

      # Log into ghcr (so we can push images)
      - name: Login to ghcr.io
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/setup-qemu-action@v1

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Set up image tag name
      - name: Set up image tag name
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        id: tag-name
        env:
          ARCH: ${{ matrix.docker-platform }}
          PRNUM: ${{github.event.pull_request.number}}
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}
        run: |
          echo "::set-output name=image_tag::${REGISTRY}/${IMAGE_NAME}:test-pr-${PRNUM}-${ARCH//\//_}"

      # Build
      - name: Test Build
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          platforms: ${{ matrix.docker-platform }}
          push: true
          # Append "-test-pr-XXX" to image name
          tags: ${{ steps.tag-name.outputs.image_tag }}

  test_function:
    name: Test Functionality
    runs-on: ubuntu-latest
    needs: [test_build]
    strategy:
      matrix:
        docker-platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v7
    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # List of files to check to trigger a rebuild on this job
      - name: Get specific changed files
        id: changed-files-specific
        uses: tj-actions/changed-files@v17
        with:
          files: |
            Dockerfile
            **.py
            requirements.txt
            !*.md
            !*.MD

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/setup-qemu-action@v1

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Set up image tag name
      - name: Set up image tag name
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        id: tag-name
        env:
          ARCH: ${{ matrix.docker-platform }}
          PRNUM: ${{github.event.pull_request.number}}
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}
        run: |
          echo "::set-output name=image_tag::${REGISTRY}/${IMAGE_NAME}:test-pr-${PRNUM}-${ARCH//\//_}"
      
      # Patch dockerfile to pull from PR-generated image
      - name: Patch dockerfile
        id: patch-dockerfile
        env:
          NEW_IMAGE: ${{ steps.tag-name.outputs.image_tag }}
        run: |
          set -x
          sed -i "s/^FROM .*/FROM ${NEW_IMAGE//\//\\/}/g" "./Dockerfile.testing"
          grep '^FROM ' "./Dockerfile.testing"

      # Build
      - name: Test Build
        id: test-build
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.testing
          no-cache: true
          platforms: ${{ matrix.docker-platform }}
          push: false

      # Set up testing output filename
      - name: Set up image tag name
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        id: test_output_filename
        env:
          ARCH: ${{ matrix.docker-platform }}
        run: |
          echo "::set-output name=output_filename::testing_output/output_${ARCH//\//_}.png"

      # Decode image from set-output in testing container
      - name: Retrieve test image
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        env:
          IMAGE_DATA: ${{ steps.test-build.outputs.output_image }}
          ARCH: ${{ matrix.docker-platform }}
          OUTPUT_IMAGE: ${{ steps.test_output_filename.outputs.output_filename }}
        run: |
          mkdir -p testing_output/
          echo "$IMAGE_DATA" | sed -z 's/,/\n/g;' | uudecode > "${OUTPUT_IMAGE}"

      - name: Upload test image as artifact
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: test_snap_${{ matrix.docker-platform }}
          path: testing_output/output.png

      - name: Upload artifacts to PR
        if: ${{ github.event_name == 'pull_request' }} && steps.changed-files-specific.outputs.any_changed == 'true'
        uses: gavv/pull-request-artifacts@v1.0.0
        with:
          commit: ${{ github.event.pull_request.head.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: |
            ${{ steps.test_output_filename.outputs.output_filename }}
            